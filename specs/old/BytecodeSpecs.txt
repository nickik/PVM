======================
======= Memory =======
======================

Allgemein
---------

:: 8-Bit Wortbreite

Anders als das Original PICAXE-BASIC ist unser PIC nur 8-Bit, das heisst anders
als im Original sind unsere Konstanten maximal 8-Bit breit, ebenso die
Register und Speicherzellen.

:: 16-Bit Instruktionsbreite

Alle Instruktionen sind fix 16-Bit breit. Eine Huffmann-Codierung macht keinen
Sinn, da der Platz durch mehr die Register- und Adressangeben verloren geht und
nicht den eigentlichen Opcode.

:: Instruction Memory

Das Instruktions-Set ist auf 12bit-Adressen ausgelegt, die maximale Grösse des
Instruction-Memorys ist also insgesamt 2^12 * 2 Byte = 8192 Byte = 8 KB.

Die Instruktion für den Conditional-Branch enthält nur eine 8-Bit-Instr-Adresse,
diese ist daher relativ zum Programm-Counter. Falls das Instruction Memory
kleiner gleich 512 Byte ist, kann diese auch als absolut angesehen werden. 

:: User Memory

Unsere VM bietet dem Benutzer 256 Register (lies: 8bit-Memory-Adressen) an,
da das BASIC nebst den Registern b0 - b15 auch noch weitere Adressen für
I/O anbietet, die nicht spezielle Instruktionen sind. 

Auch können so andere Sprachen als BASIC implementiert werden.


VM-Register
------------

Es existieren 16 Register für die VM, welche alle 8bit breit sind.

    r0 - r15
    
Diese Register sind für die Verwendung durch den Compiler gedacht.
    
256 VM-Speicherzellen (8bit)
---------------------------

Layout:

    [  0 -  15]   b0-b15
    [ 16 - ...]   General Purpose (I/O usw?)
    
Diese Speicherzellen sind für die Verwendung durch den User gedacht.

8-Zellen Return-Adressen-Stack 
------------------------------

    [addr0] top  <- aktuellste Returnadresse
    [addr1] 
    [.....]
    [addr7] bottom

Der Stack hat Platz für 8 Return-Adressen, die jeweils maximal 12-Bit breit sind.
Dies entspricht der Stack-Grösse des Original-BASICS.

=======================
======= Befehle =======
=======================

Allgemeine Form
---------------

Breite: 16-Bit

  +--------+------------------------+
  | OPCODE |   OP DATA AND STUFF    |
  |  4bit  |         12bit          |
  +--------+------------------------+

Jede Instruktion besteht aus einem 4bit OPCODE und 12bit OPDATA, welche je nach
OPCODE anders interpretiert werden.

Gültige OPCODES
---------------

  Binär     Hex     OPCODE      Beschreibung
  -----     ---     -------     ------------
  0000      0       -    
  0001      1       -
  0010      2       -
  0011      3       -
  
  0100      4       LOAD        Lädt Memoryzelle in Register
  0101      5       STORE       Speichert Register nach Memoryzelle
  0110      6       MOV         Kopiert Register nach Register
  0111      7       SET         Setzt Immediate ins Register
  
  1000      8       JMP         Sprung nach Adresse (Unconditional Jump)
  1001      9       BNZ         Sprung falls Register Nicht-Null (Conditional Jump)
  1010      A       CALL        Call Routine (Sprung nach Adresse und PC+16 auf Stack)
  1011      B       RET         Return Routine (PC von Stack laden, danach Springen)
  
  1100      C       ALUOP       Führt eine Mathematische Operation aus
  1101      D       BITOP       Führt Bitweise Operationen aus
  1110      E       -
  1111      F       SPEC        Spezielle C-Funktion aufrufen
  
  
LOAD/STORE/MOVE/SET
-------------------

:: LOAD 0x4

  +--------+----------------+--------+
  | OPCODE |  MEMORY ADDR   |REGISTER|
  |  4bit  |      8bit      |  4bit  |
  +--------+----------------+--------+
  
Lädt Wert aus MEMORY ADDR nach REGISTER.

:: STORE 0x5

  +--------+--------+----------------+
  | OPCODE |REGISTER|  MEMORY ADDR   |
  |  4bit  |  4bit  |     8bit       |
  +--------+--------+----------------+

Speichert Wert aus REGISTER nach MEMORY ADDR.

:: MOV 0x6

  +--------+--------+--------+--------+
  | OPCODE | SOURCE |  DEST  |        |
  |  4bit  |  4bit  |  4bit  |  4bit  |
  +--------+--------+--------+--------+

Kopiert Wert aus Register SOURCE ins Register DEST.
Letzte 4bit sind Padding und damit bedeutungslos.

:: SET 0x7

  +--------+----------------+--------+
  | OPCODE |   IMMEDIATE    |REGISTER|
  |  4bit  |      8bit      |  4bit  |
  +--------+----------------+--------+
  
Kopiert Konstante IMMEDIATE nach REGISTER.

JMP/BNZ/CALL/RET
----------------


:: JMP 0x8

  +--------+------------------------+
  | OPCODE |  INSTRUCTION ADDRESS   |
  |  4bit  |         12bit          |
  +--------+------------------------+
  
Springt nach Adresse INSTRUCTION ADDRESS.

:: BNZ 0x9

  +--------+--------+----------------+
  | OPCODE |REGISTER|   INSTR ADDR   |
  |  4bit  |  4bit  |     8bit       |
  +--------+--------+----------------+

Branch-Not-Zero: Springt an die (relative) Adresse INSTR ADDR falls der Wert im
Register REGISTER ungleich Null ist.

:: CALL 0xA

  +--------+------------------------+
  | OPCODE |  INSTRUCTION ADDRESS   |
  |  4bit  |         12bit          |
  +--------+------------------------+

Springt zu Adresse INSTRUCTION ADDRESS, speichert vorher aber PC+16 (nächste Instruktion)
auf dem Stack.

:: RET 0xB

  +--------+------------------------+
  | OPCODE |                        |
  |  4bit  |         12bit          |
  +--------+------------------------+
  
Liest die Return-Adresse aus dem Stack aus und springt dort hin.

ALUOP/BITOP
-----------

:: ALUOP 0xC

  +--------+--------+--------+--------+
  | OPCODE | ALU-OP | SOURCE |  DEST  |
  |  4bit  |  4bit  |  4bit  |  4bit  |
  +--------+--------+--------+--------+
  
Führt eine die in ALU-OP definierte mathematische Operation aus:

Es gilt:
    DEST = DEST <OP> SOURCE

Wobei ALU-OP eine der folgenden Operationen ist:

    Hex     Operation
    ---     ---------
    0       +   add
    1       -   subtract
    2       *   multiply (returns low word of result)
    3       **  multiply (returns high word of result) # possible on the PIC?
           
    4       /   divide (returns quotient)
    5       %   modulus divide (returns remainder)
    6       ==  equal to
    7       != 	not equal to
            
    8       > 	greater than
  	9       < 	less than
  	A       >= 	greater than or equal to
  	B       <= 	less than or equal to
    
    C       MAX returns maximum
    D       MIN returns minimum
    E       ???
    F       ???
    
:: BITOP 0xD

  +--------+--------+--------+--------+
  | OPCODE | BIT-OP | SOURCE |  DEST  |
  |  4bit  |  4bit  |  4bit  |  4bit  |
  +--------+--------+--------+--------+
  
Führt eine die in BIT-OP definierte bitweise Operation aus:

Es gilt:
    DEST = DEST <OP> SOURCE

Wobei BIT-OP eine der folgenden Operationen ist:

    Hex     Operation
    ---     ---------
    0       !       logical not (DEST = !SOURCE)
    1       &&      logical and
    2       ||      logical or
    3       ???
           
    4       INV     bitwise not (DEST = ~SOURCE)
    5       AND     bitwise AND &
    6       OR      bitwise OR | 
    7       XOR     bitwise XOR ^
    
    8       NAND    bitwise NAND
    9       NOR     bitwise NOR
    A       ANDNOT 	bitwise AND NOT (NB this is not the same as NAND)
    B       ORNOT 	bitwise OR NOT (NB this is not the same as NOR)
    
    C       CXNOR 	bitwise XOR NOT (same as XNOR)
    D       << 	    shift left
    E       >>      shift right
    F       ???     
    
SPEC
----

Special C-Function: Ruft eine Funktion der der Funktionstabelle auf, wobei
FUNCTION TABLE ENTRY der Index in der Funktionstabelle ist.

  +--------+------------------------+
  | OPCODE |  FUNCTION TABLE ENTRY  |
  |  4bit  |         12bit          |
  +--------+------------------------+
  
Eine Funktion kann bis zu 8 (acht) Parameter akzeptieren, wobei diese 
in den Registern r7 bis r15 gespeichert sind.
